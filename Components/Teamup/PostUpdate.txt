import React, { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send, Zap, Globe, Users } from 'lucide-react';
import { StatusUpdate } from "@/entities/all";
import { toast } from "sonner";
import { Switch } from "@/components/ui/switch";

export default function PostUpdateForm({ currentUser, onStatusPosted, onOpenChallengeModal }) {
  const [newStatus, setNewStatus] = useState('');
  const [statusType, setStatusType] = useState('general');
  const [isPosting, setIsPosting] = useState(false);
  const [isPublic, setIsPublic] = useState(true);

  const handlePostTypeChange = (e) => {
    const value = e.target.value;
    if (value === 'challenge') {
      if (onOpenChallengeModal) onOpenChallengeModal();
      // Reset dropdown to general if they close the modal without creating
      setTimeout(() => setStatusType('general'), 100);
    } else {
      setStatusType(value);
    }
  };

  const handlePostStatus = async () => {
    if (!newStatus.trim() || !currentUser) return;
    
    setIsPosting(true);
    try {
      const newPost = await StatusUpdate.create({
        user_id: currentUser.id,
        content: newStatus.trim(),
        status_type: statusType,
        is_public: isPublic,
      });
      
      setNewStatus('');
      setStatusType('general');
      toast.success("Status posted to the feed!");
      if (onStatusPosted) onStatusPosted(newPost);
    } catch (error) {
      console.error("Error posting status:", error);
      toast.error("Failed to post status.");
    } finally {
      setIsPosting(false);
    }
  };

  return (
    <Card className="bg-slate-900/50 backdrop-blur-xl border-purple-800/30">
        <CardContent className="p-4">
            <div className="space-y-3">
                <Textarea
                    placeholder="Share an update with the community..."
                    value={newStatus}
                    onChange={(e) => setNewStatus(e.target.value)}
                    className="bg-slate-800/50 border-purple-800/30 text-white min-h-[80px] resize-none focus:border-[#00FF41]/70"
                    maxLength={280}
                />
                
                {/* Post Type Dropdown with Character Count */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-xs text-gray-400">Type:</span>
                    <select
                        value={statusType}
                        onChange={handlePostTypeChange}
                        className="bg-slate-800/50 border border-purple-800/30 rounded px-2 py-1 text-white text-sm"
                    >
                        <option value="general">Post</option>
                        <option value="playing">Currently Playing</option>
                        <option value="looking_for_match">Looking for Match</option>
                        <option value="achievement">Achievement</option>
                        <option value="online">I'm Online!</option>
                        <option value="offline">Going Offline</option>
                        {onOpenChallengeModal && <option value="challenge">âš¡ Issue a Call Out</option>}
                    </select>
                  </div>
                  <span className="text-xs text-gray-400">{newStatus.length}/280</span>
                </div>

                {/* Visibility Toggle and Post Button Row */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center gap-2">
                      {isPublic ? (
                        <Globe className="w-4 h-4 text-[#00FF41]" />
                      ) : (
                        <Users className="w-4 h-4 text-purple-400" />
                      )}
                      <span className="text-sm text-gray-300">
                        {isPublic ? "Public Feed" : "Matches Only"}
                      </span>
                    </div>
                    <Switch
                      checked={isPublic}
 