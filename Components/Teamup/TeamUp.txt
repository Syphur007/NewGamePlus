
import React, { useState, useEffect, useCallback } from 'react';
import { TeamMember, TeamInvite } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { X, Users, Crown, Shield, Globe, UserPlus, Settings } from "lucide-react";
import { toast } from "sonner";

export default function TeamDetailsDialog({ team, game, creator, currentUser, onClose, onUpdate }) {
    const [members, setMembers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isMember, setIsMember] = useState(false);
    const [userRole, setUserRole] = useState(null);

    const loadTeamDetails = useCallback(async () => {
        try {
            const teamMembers = await TeamMember.filter({ team_id: team.id, status: 'active' });
            setMembers(teamMembers);
            
            const currentMember = teamMembers.find(m => m.user_id === currentUser.id);
            setIsMember(!!currentMember);
            setUserRole(currentMember?.role || null);
        } catch (error) {
            console.error("Error loading team details:", error);
        } finally {
            setIsLoading(false);
        }
    }, [team.id, currentUser.id]);

    useEffect(() => {
        loadTeamDetails();
    }, [loadTeamDetails]);

    const handleLeaveTeam = async () => {
        if (!isMember) return;
        
        try {
            const currentMember = members.find(m => m.user_id === currentUser.id);
            if (currentMember) {
                await TeamMember.update(currentMember.id, { status: 'inactive' });
                toast.success(`Left ${team.team_name}`);
                onUpdate();
                onClose();
            }
        } catch (error) {
            console.error("Error leaving team:", error);
            toast.error("Failed to leave team");
        }
    };

    const isLeader = userRole === 'leader' || team.creator_id === currentUser.id;

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
            </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <Card className="bg-slate-900/90 backdrop-blur-xl border-[#00FF41]/50 w-full max-w-3xl max-h-[90vh] overflow-y-auto">
                <CardHeader className="border-b border-[#00FF41]/30">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                            {team.is_private ? (
                                <Shield className="w-6 h-6 text-red-400" />
                            ) : (
                                <Globe className="w-6 h-6 text-[#00FF41]" />
                            )}
                            <div>
                                <CardTitle className="text-[#00FF41] text-xl">{team.team_name}</CardTitle>
                                <p className="text-gray-400">for {game?.title}</p>
                            </div>
                        </div>
                        <Button variant="ghost" size="icon" onClick={onClose}>
                            <X className="w-5 h-5" />
                        </Button>
                    </div>
                </CardHeader>

                <CardContent className="p-6 space-y-6">
                    {/* Team Info */}
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <h3 className="text-sm text-gray-400 mb-1">Team Type</h3>
                            <Badge variant="outline" className="bg-purple-600/20 text-purple-200">
                                {team.team_type}
                            </Badge>
                        </div>
                        <div>
                            <h3 className="text-sm text-gray-400 mb-1">Skill Level</h3>
                            <Badge variant="outline" className="bg-yellow-600/20 text-yellow-200">
                                {team.required_skill_level}
                            </Badge>
                        </div>
                    </div>

                    {team.description && (
                        <div>
                            <h3 className="text-sm text-gray-400 mb-2">Description</h3>
 