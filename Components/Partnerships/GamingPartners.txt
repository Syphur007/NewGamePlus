import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import { 
  Trophy, 
  Flame, 
  Clock, 
  Gamepad2, 
  Star, 
  Calendar, 
  Users, 
  TrendingUp,
  Camera,
  Heart,
  Zap
} from 'lucide-react';
import { format } from 'date-fns';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';

export default function GamingPartnershipCard({ partnership, partner, currentUser, onStartSession, onViewDetails }) {
  const [levelProgress, setLevelProgress] = useState(0);

  useEffect(() => {
    // Calculate progress to next level (each level requires 100 more hours than previous)
    const currentLevelHours = partnership.partnership_level * 100;
    const nextLevelHours = (partnership.partnership_level + 1) * 100;
    const progress = ((partnership.total_hours_played - currentLevelHours) / (nextLevelHours - currentLevelHours)) * 100;
    setLevelProgress(Math.min(Math.max(progress, 0), 100));
  }, [partnership]);

  const getPartnershipBadgeColor = (level) => {
    if (level >= 50) return "bg-yellow-500/20 text-yellow-300 border-yellow-500";
    if (level >= 25) return "bg-purple-500/20 text-purple-300 border-purple-500";
    if (level >= 10) return "bg-blue-500/20 text-blue-300 border-blue-500";
    return "bg-green-500/20 text-green-300 border-green-500";
  };

  const getStatusEmoji = (status) => {
    switch(status) {
      case 'legendary': return '👑';
      case 'active': return '🔥';
      case 'casual': return '😎';
      case 'on_break': return '😴';
      default: return '🎮';
    }
  };

  return (
    <Card className="bg-slate-900/50 backdrop-blur-xl border-purple-800/30 hover:border-purple-600/50 transition-all duration-300 group">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="relative">
              <Avatar className="w-12 h-12 border-2 border-purple-500/50">
                <AvatarImage src={partner.avatar_url} />
                <AvatarFallback>{partner.display_name?.[0]}</AvatarFallback>
              </Avatar>
              {partnership.current_streak > 0 && (
                <div className="absolute -top-1 -right-1 w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                  <Flame className="w-3 h-3 text-white" />
                </div>
              )}
            </div>
            
            <div>
              <h3 className="text-white font-bold flex items-center gap-2">
                <Link to={createPageUrl(`Profile?id=${partner.id}`)} className="hover:text-purple-300">
                  {partnership.partnership_name || `${partner.display_name} & You`}
                </Link>
                <span className="text-lg">{getStatusEmoji(partnership.partnership_status)}</span>
              </h3>
              <p className="text-gray-400 text-sm">Gaming since {format(new Date(partnership.created_date), 'MMM yyyy')}</p>
            </div>
          </div>
          
          <Badge variant="outline" className={getPartnershipBadgeColor(partnership.partnership_level)}>
            Level {partnership.partnership_level}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Partnership Level Progress */}
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-sm text-gray-400">Partnership Progress</span>
            <span className="text-sm text-purple-300">{partnership.total_hours_played}h played together</span>
          </div>
          <Progress value={levelProgress} className="bg-slate-800">
            <div className="bg-gradient-to-r from-purple-500 to-pink-500 h-full rounded-full transition-all" 
                 style={{ width: `${levelProgress}%` }} />
          </Progress>
        </div>

 