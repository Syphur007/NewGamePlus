import React, { useState, useEffect } from 'react';
import { User, Game, Challenge } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { X, Zap, Eye } from "lucide-react";
import OpponentWheel from "../callouts/OpponentWheel";
import GameWheel from "../callouts/GameWheel";
import { toast } from "sonner";

export default function CreateChallengeModal({ currentUser, onClose, onChallengeCreated }) {
  const [step, setStep] = useState(1); // 1: Opponent, 2: Game
  const [availableUsers, setAvailableUsers] = useState([]);
  const [availableGames, setAvailableGames] = useState([]);
  const [arGames, setArGames] = useState([]);
  const [selectedOpponent, setSelectedOpponent] = useState(null);
  const [selectedGame, setSelectedGame] = useState(null);
  const [isARMode, setIsARMode] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      const [users, games] = await Promise.all([User.list(), Game.list()]);
      setAvailableUsers(users.filter(u => u.id !== currentUser.id && u.is_profile_complete));
      setAvailableGames(games);
      const arSpecificGames = games.filter(g => g.genre?.toLowerCase().includes('ar') || g.platform?.includes('AR'));
      setArGames(arSpecificGames);
    };
    loadData();
  }, [currentUser]);

  const handleOpponentSelected = (opponent, arMode = false) => {
    setSelectedOpponent(opponent);
    setIsARMode(arMode);
    setStep(2);
  };

  const handleGameSelected = async (game) => {
    setSelectedGame(game);
    
    if (!selectedOpponent || !game) {
      toast.error("Missing opponent or game selection!");
      return;
    }

    try {
      const challengeDateTime = new Date();
      challengeDateTime.setHours(challengeDateTime.getHours() + 24);

      await Challenge.create({
        challenger_id: currentUser.id,
        challenged_id: selectedOpponent.id,
        game_id: game.id,
        challenge_datetime: challengeDateTime.toISOString(),
        challenge_type: isARMode ? 'ar_callout' : 'call_out'
      });

      toast.success(`Challenge sent to ${selectedOpponent.display_name} for ${game.title}!`);
      if (onChallengeCreated) onChallengeCreated();
      
    } catch (error) {
      toast.error("Failed to send challenge.");
    }
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div>
            <h3 className="text-xl font-bold text-white mb-4 text-center">Choose Challenge Type</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
               <Button size="lg" className="h-24 text-lg bg-gradient-to-r from-purple-500 to-pink-500" onClick={() => setStep(1.5)}>
                 <Zap className="w-6 h-6 mr-2" /> Standard Call Out
               </Button>
               <Button size="lg" className="h-24 text-lg bg-gradient-to-r from-[#00FF41] to-[#00D035] text-black font-bold" onClick={() => { setIsARMode(true); setStep(1.5); }}>
                 <Eye className="w-6 h-6 mr-2" /> AR Call Out
               </Button>
            </div>
          </div>
        );
      case 1.5:
        return <OpponentWheel users={availableUsers} onSelect={(opponent) => handleOpponentSelected(opponent, isARMode)} onClose={onClose} />;
      case 2:
        return <GameWheel games={isARMode ? arGames : availableGames} onSelect={handleGameSelected} onClose={onClose} isARMode={isARMode} />;
      default:
        return null;
    }
  };

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-modals flex items-center justify-center p-4">
      <Card className="bg-slate-900/90 border-purple-500/50 w-full max-w-2xl relative">
        <Button variant="ghost" size="icon" onClick={onClose} className="absolute top-2 right-2 text-gray-400 hover:text-white z-10"><X /></Button>
        <CardContent className="p-6">
          {renderStep()}
        </CardContent>
      </Card>
    </div>
  );
}