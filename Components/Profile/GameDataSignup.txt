
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { CalendarClock, Plus, X, Trash2 } from "lucide-react";
import { GameDateAvailability } from "@/entities/all";

const TIME_SLOTS = [
  "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", 
  "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", 
  "21:00", "22:00", "23:00"
];

const SESSION_LENGTHS = [
  { value: 1, label: "1 Hour" },
  { value: 2, label: "2 Hours" },
  { value: 3, label: "3 Hours" },
  { value: 4, label: "4 Hours" }
];

export default function GameDateSignupForm({ currentUser, userTopTenGames, games, onAvailabilityAdded }) {
  const [availabilities, setAvailabilities] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    available_date: "",
    start_time: "",
    session_length_hours: 2,
    preferred_games: [],
    is_public: true,
    notes: ""
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const loadAvailabilities = useCallback(async () => {
    if (!currentUser) return;
    try {
      const userAvailabilities = await GameDateAvailability.filter(
        { user_id: currentUser.id },
        "-available_date"
      );
      setAvailabilities(userAvailabilities);
    } catch (error) {
      console.error("Error loading availabilities:", error);
    }
  }, [currentUser]);

  useEffect(() => {
    loadAvailabilities();
  }, [loadAvailabilities]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const startTime = new Date(`${formData.available_date}T${formData.start_time}`);
      const endTime = new Date(startTime.getTime() + (formData.session_length_hours * 60 * 60 * 1000));
      
      await GameDateAvailability.create({
        user_id: currentUser.id,
        available_date: formData.available_date,
        start_time: formData.start_time,
        end_time: endTime.toTimeString().slice(0, 5),
        session_length_hours: formData.session_length_hours,
        preferred_games: formData.preferred_games,
        is_public: formData.is_public,
        notes: formData.notes
      });

      setShowForm(false);
      setFormData({
        available_date: "",
        start_time: "",
        session_length_hours: 2,
        preferred_games: [],
        is_public: true,
        notes: ""
      });
      await loadAvailabilities();
      if (onAvailabilityAdded) onAvailabilityAdded();
    } catch (error) {
      console.error("Error creating availability:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDeleteAvailability = async (availabilityId) => {
    if (!confirm("Are you sure you want to delete this availability?")) return;
    
    try {
      await GameDateAvailability.delete(availabilityId);
      await loadAvailabilities();
    } catch (error) {
      console.error("Error deleting availability:", error);
    }
  };

  const handleGameToggle = (gameId) => {
    setFormData(prev => ({
      ...prev,
      preferred_games: prev.preferred_games.includes(gameId)
        ? prev.preferred_games.filter(id => id !== gameId)
        : [...prev.preferred_games, gameId]
    }));
  };
