
import React from 'react';
import { UserGame, User, GameRating, Game } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Library, Plus, Minus, Trash2, Gamepad2, Star, Trophy, Search, Edit, X } from "lucide-react";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

import EditGameDetailsDialog from "../games/EditGameDetailsDialog";
import BulkAddGamesDialog from "../games/BulkAddGamesDialog";

export default function FullGameLibrary({ userGames, games, isCurrentUserProfile, onUpdate, onClose, profileUser }) {
    const [searchTerm, setSearchTerm] = React.useState("");
    const [editingGame, setEditingGame] = React.useState(null);
    const [userRatings, setUserRatings] = React.useState({});
    const [currentUser, setCurrentUser] = React.useState(null);
    const [isBulkAddOpen, setIsBulkAddOpen] = React.useState(false);
    
    const topTenCount = userGames.filter(ug => ug.is_top_ten).length;

    React.useEffect(() => {
        const loadRatings = async () => {
            try {
                const me = await User.me();
                setCurrentUser(me);
                
                const ratings = await GameRating.filter({ user_id: me.id });
                const ratingsMap = {};
                ratings.forEach(r => {
                    ratingsMap[r.game_id] = r.rating;
                });
                setUserRatings(ratingsMap);
            } catch (error) {
                console.error("Error loading ratings:", error);
                toast.error("Failed to load game ratings.");
            }
        };
        if (isCurrentUserProfile) {
            loadRatings();
        }
    }, [isCurrentUserProfile, onUpdate]);

    const handleToggleTopTen = async (userGame) => {
        if (!userGame.is_top_ten && topTenCount >= 10) {
            toast.error("Your Top Ten Matching System™ is full!", {
                description: "Remove a game from your Top Ten Matching System™ before adding a new one."
            });
            return;
        }

        try {
            await UserGame.update(userGame.id, { is_top_ten: !userGame.is_top_ten });
            toast.success(
                userGame.is_top_ten 
                    ? "Removed from Top Ten Matching System™." 
                    : "Added to Top Ten Matching System™!"
            );
            onUpdate();
        } catch (error) {
            console.error("Error updating Top Ten status:", error);
            toast.error("Failed to update Top Ten status.");
        }
    };
    
    const handleRemoveFromLibrary = async (userGame) => {
        const game = games.find(g => g.id === userGame.game_id);
        if (!confirm(`Are you sure you want to remove ${game?.title || 'this game'} from your library permanently?`)) {
            return;
        }
        
        try {
            await UserGame.delete(userGame.id);
            toast.success(`${game?.title || 'Game'} removed from your library.`);
            onUpdate();
        } catch (error) {
            console.error("Error removing game from library:", error);
            toast.error("Failed to remove game from library.");
        }
    };

    const handleEditGame = (userGame) => {
        setEditingGame(userGame);
    };

    const filteredUserGames = userGames.filter(userGame => {
        const game = games.find(g => g.id === userGame.game_id);
        return game?.title?.toLowerCase().includes(searchTerm.toLowerCase());
    });

    if (userGames.length === 0) {
        return (
            <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                <Card className="bg-slate-900/50 backdrop-blur-xl border-purple-800/30 w-full max-w-4xl">
                    <CardHeader>
                        <div className="flex items-center justify-between">
                            <CardTitle className="text-white matrix-font tracking-wider text-2xl font-black bg-gradient-to-r from-purple-400 via-pink-500 to-purple-600 bg-clip-text text-transparent drop-shadow-lg [text-shadow:_2px_2px_4px_rgb(0_0_0_/_50%)] flex items-center gap-2">
                                <Library className="w-6 h-6 text-purple-400" />
                                Your Personal Game Library
                            </CardTitle>
                            <Button variant="ghost" size="icon" onClick={onClose}>
                                <X className="w-5 h-5" />
                            </Button>
                        </div>
                    </CardHeader>
                    <CardContent className="text-center py-12">
                        <div className="w-16 h-16 bg-slate-800/50 rounded-xl flex items-center justify-center mx-auto mb-4">
                            <Library className="w-8 h-8 text-gray-500" />
                        </div>
                        <h3 className="text-xl font-bold text-white mb-2">Your Library is Empty</h3>
