import React, { useState, useEffect, useCallback } from 'react';
import { GamingPartnership, User, Match, GamingSession } from "@/entities/all";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Users, Plus, Trophy, TrendingUp } from 'lucide-react';
import { toast, Toaster } from "sonner";
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';

import GamingPartnershipCard from "../components/partnerships/GamingPartnershipCard";
import StartGamingSessionDialog from "../components/partnerships/StartGamingSessionDialog";

export default function GamingPartnershipsPage() {
  const [partnerships, setPartnerships] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const [allUsers, setAllUsers] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [showSessionDialog, setShowSessionDialog] = useState(false);
  const [selectedPartnership, setSelectedPartnership] = useState(null);

  const loadPartnerships = useCallback(async () => {
    try {
      const me = await User.me();
      setCurrentUser(me);

      const [allPartnerships, users] = await Promise.all([
        GamingPartnership.filter({ 
          $or: [{ user1_id: me.id }, { user2_id: me.id }] 
        }),
        User.list()
      ]);

      setPartnerships(allPartnerships);
      setAllUsers(users.reduce((acc, user) => ({ ...acc, [user.id]: user }), {}));
    } catch (error) {
      console.error("Error loading partnerships:", error);
      toast.error("Failed to load gaming partnerships.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadPartnerships();
  }, [loadPartnerships]);

  const handleStartSession = (partnership) => {
    setSelectedPartnership(partnership);
    setShowSessionDialog(true);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <Toaster richColors position="top-center" />
      
      <div className="mb-8">
        <h1 className="page-title-font text-4xl text-[#00FF41] font-black tracking-wider drop-shadow-lg [text-shadow:_0_0_15px_rgba(0,255,65,0.5)] mb-4">
          Gaming Partnerships
        </h1>
        <p className="text-gray-400 text-lg">Track your gaming duos, stats, and level up together!</p>
      </div>

      {partnerships.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {partnerships.map((partnership) => {
            const partnerId = partnership.user1_id === currentUser.id ? partnership.user2_id : partnership.user1_id;
            const partner = allUsers[partnerId];

            return (
              <GamingPartnershipCard
                key={partnership.id}
                partnership={partnership}
                partner={partner}
                currentUser={currentUser}
                onStartSession={() => handleStartSession(partnership)}
                onViewDetails={() => {
                  toast.info("Partnership details coming soon!");
                }}
              />
            );
          })}
        </div>
      ) : (
        <Card className="bg-slate-900/50 backdrop-blur-xl border-purple-800/30">
          <CardContent className="p-12 text-center">
            <div className="w-16 h-16 bg-purple-600/20 rounded-xl flex items-center justify-center mx-auto mb-4">
              <Users className="w-8 h-8 text-purple-400" />
            </div>
            <h2 className="text-xl font-bold text-white mb-2">No Gaming Partnerships Yet</h2>
            <p className="text-gray-400 mb-6">
              Create partnerships with your matches to track your gaming journey together!
            </p>
            <Link to={createPageUrl("Matches")}>
              <Button className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600">
                <Trophy className="w-4 h-4 mr-2" />
                View Your Matches
              </Button>
            </Link>
          </CardContent>
        </Card>
      )}

      {showSessionDialog && selectedPartnership && (
        <StartGamingSessionDialog
          partnership={selectedPartnership}
          currentUser={currentUser}
          onClose={() => setShowSessionDialog(false)}
          onSessionStarted={() => {
            setShowSessionDialog(false);
            toast.success("Gaming session started!");
          }}
        />
      )}
    </div>
  );
}